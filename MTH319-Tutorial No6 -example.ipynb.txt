{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22.68749069233732\n",
      "22.68749069233732 23.206293073677 3.304362134352882\n",
      "23.2008882476815 21.879102279429308 4.073146635522708\n"
     ]
    }
   ],
   "source": [
    "# Tasks:\n",
    "# Setup\n",
    "#           dS/S = r*dt + sigma*dW\n",
    "#           dB/B = r*dt\n",
    "\n",
    "# 1) Simulating S with variance reduction techniques\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    " \n",
    "\n",
    "def EulerMilsteinMCStock(scheme, parameters):\n",
    "    np.random.seed(1000)\n",
    "\n",
    "    # time setup\n",
    "    T = parameters['setup']['T']  # total time/maturity\n",
    "    numSteps = parameters['setup']['numSteps']  # number of steps\n",
    "    numPaths = parameters['setup']['numPaths']  # number of simulated paths\n",
    "    dt = parameters['setup']['dt']\n",
    "\n",
    "    # model parameters\n",
    "    S_0 = parameters['model']['S0']  # initial value\n",
    "    sigma = parameters['model']['sigma']  # initial value\n",
    "    rf = parameters['model']['rf']  # initial value    \n",
    "\n",
    "    # simulation    \n",
    "    S = np.zeros((numSteps + 1, numPaths),dtype=float)\n",
    "    S[0,:] = np.log(S_0)\n",
    "  \n",
    "    ################         simluations for asset price S              ########\n",
    "    for i in range(numPaths):\n",
    "        for t_step in range(1, numSteps+1):\n",
    "            # the 2 stochastic drivers for variance V and asset price S and correlated\n",
    "            Zs = np.random.normal(0, 1, 1)                        \n",
    "            \n",
    "            if scheme == 'Euler':\n",
    "                S[t_step,i] = S[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs \n",
    "            elif scheme == 'Milstein':    \n",
    "                # Euler and Milstein have the same discretization scheme for Log(S) due to dsigma(t,X)/dX =0\n",
    "                S[t_step,i] = S[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs                                \n",
    "            \n",
    "    return np.exp(S)\n",
    "\n",
    "def EulerMilsteinMCStock_Control(scheme, parameters):\n",
    "    \n",
    "    np.random.seed(1000)\n",
    "\n",
    "    # time setup\n",
    "    T = parameters['setup']['T']  # total time/maturity\n",
    "    numSteps = parameters['setup']['numSteps']  # number of steps\n",
    "    numPaths = parameters['setup']['numPaths']  # number of simulated paths\n",
    "    dt = parameters['setup']['dt']\n",
    "\n",
    "    # model parameters\n",
    "    S_0 = parameters['model']['S0']  # initial value\n",
    "    sigma = parameters['model']['sigma']  # initial value\n",
    "    rf = parameters['model']['rf']  # initial value    \n",
    "\n",
    "    # simulation    \n",
    "    S1 = np.zeros((numSteps + 1, numPaths),dtype=float)\n",
    "    S1[0,:] = np.log(S_0)\n",
    "    \n",
    "    S2 = np.zeros((numSteps + 1, numPaths),dtype=float)\n",
    "    S2[0,:] = np.log(S_0)\n",
    "  \n",
    "    ################         simluations for asset price S              ########\n",
    "    for i in range(numPaths):\n",
    "        for t_step in range(1, numSteps+1):\n",
    "            # the 2 stochastic drivers for variance V and asset price S and correlated\n",
    "            Zs = np.random.normal(0, 1, 1)\n",
    "            Zs_minus = -Zs \n",
    "            \n",
    "            if scheme == 'Euler':\n",
    "                S1[t_step,i] = S1[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs \n",
    "                S2[t_step,i] = S2[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs_minus \n",
    "            elif scheme == 'Milstein':    \n",
    "                # Euler and Milstein have the same discretization scheme for Log(S) due to dsigma(t,X)/dX =0\n",
    "                S1[t_step,i] = S1[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs  \n",
    "                S2[t_step,i] = S2[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs_minus \n",
    "            \n",
    "    return np.exp(S1), np.exp(S2), (np.exp(S1)+ np.exp(S2))/2\n",
    "    \n",
    "def EulerMilsteinMCStock_Antithetic(scheme, parameters):  \n",
    "    \n",
    "    np.random.seed(1000)\n",
    "\n",
    "    # time setup\n",
    "    T = parameters['setup']['T']  # total time/maturity\n",
    "    numSteps = parameters['setup']['numSteps']  # number of steps\n",
    "    numPaths = parameters['setup']['numPaths']  # number of simulated paths\n",
    "    dt = parameters['setup']['dt']\n",
    "\n",
    "    # model parameters\n",
    "    S_0 = parameters['model']['S0']  # initial value\n",
    "    sigma = parameters['model']['sigma']  # initial value\n",
    "    rf = parameters['model']['rf']  # initial value    \n",
    "\n",
    "    # simulation    \n",
    "    S1 = np.zeros((numSteps + 1, numPaths),dtype=float)\n",
    "    S1[0,:] = np.log(S_0)\n",
    "    \n",
    "    S2 = np.zeros((numSteps + 1, numPaths),dtype=float)\n",
    "    S2[0,:] = np.log(S_0)\n",
    "    \n",
    "    #S3 = np.zeros((numSteps + 1, numPaths),dtype=float)\n",
    "    #S3[0,:] = np.log(S_0)\n",
    "  \n",
    "    ################         simluations for asset price S              ########\n",
    "    for i in range(numPaths):\n",
    "        for t_step in range(1, numSteps+1):\n",
    "            # the 2 stochastic drivers for variance V and asset price S and correlated\n",
    "            U1 = np.random.rand()  # r.v. from uniform distribution\n",
    "            Zs_1 = norm.ppf(U1)  # inverse function of a normal distribution\n",
    "            Zs_2 = norm.ppf(1-U1)            \n",
    "            #Zs_3 = (Zs_1+Zs_2)/2\n",
    "            \n",
    "            if scheme == 'Euler':\n",
    "                S1[t_step,i] = S1[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs_1 \n",
    "                S2[t_step,i] = S2[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs_2 \n",
    "                #S3[t_step,i] = S2[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs_3\n",
    "            elif scheme == 'Milstein':    \n",
    "                # Euler and Milstein have the same discretization scheme for Log(S) due to dsigma(t,X)/dX =0\n",
    "                S1[t_step,i] = S1[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs_1  \n",
    "                S2[t_step,i] = S2[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs_2 \n",
    "                #S3[t_step,i] = S2[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs_3 \n",
    "            \n",
    "    return np.exp(S1), np.exp(S2), (np.exp(S1)+np.exp(S2))/2\n",
    "\n",
    "if __name__==\"__main__\": # main function\n",
    "    \n",
    "    S0 = 100\n",
    "    sigma = 0.20\n",
    "    K = 100\n",
    "    rf = 0.05    \n",
    "    T = 1     # maturity\n",
    "    \n",
    "    # discrete setup\n",
    "    N = 100  # steps\n",
    "    dt = T/N\n",
    "    M = 200\n",
    "    \n",
    "    Optype = 1 # 1: call -1: put \n",
    "\n",
    "    parameters = {'model':{'S0':S0, 'sigma':sigma, 'rf':rf},                 \n",
    "                  'asset':{'K':K, 'optype': Optype},\n",
    "                  'setup':{'T':T, 'numSteps':N, 'dt': T/N, 'numPaths':M}                \n",
    "                 }\n",
    "    # Task 1\n",
    "    # simulate stock prices\n",
    "    Sim_S = EulerMilsteinMCStock('Euler', parameters)\n",
    "    print(np.std(Sim_S[-1,:]))\n",
    "    \n",
    "    [Sim_S1, Sim_S2, Sim_S3] = EulerMilsteinMCStock_Control('Euler', parameters)\n",
    "    print(np.std(Sim_S1[-1,:]),np.std(Sim_S2[-1,:]), np.std(Sim_S3[-1,:]))\n",
    "    \n",
    "    [Sim_S4, Sim_S5, Sim_S6] = EulerMilsteinMCStock_Antithetic('Euler', parameters)\n",
    "    print(np.std(Sim_S4[-1,:]),np.std(Sim_S5[-1,:]), np.std(Sim_S6[-1,:]))\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "parameter_1=\n",
      "\n",
      "{'model': {'S0': 100, 'sigma': 0.2, 'rf': 0.05}, 'asset': {'K': 100, 'optype': 1}, 'option': {'K': 100, 'optype': 1, 'T': 1}, 'setup': {'T': 1, 'numSteps': 50, 'dt': 0.02, 'numPaths': 1}, 'strategy': {'n_c': -1, 'n_s': 0.6368306511756191, 'n_b': -53.232481545376345, 'k': 0}}\n",
      "parameter_2=\n",
      "\n",
      "{'model': {'S0': 100, 'sigma': 0.2, 'rf': 0.05}, 'asset': {'K': 100, 'optype': 1}, 'option': {'K': 100, 'optype': 1, 'T': 2}, 'setup': {'T': 1, 'numSteps': 50, 'dt': 0.02, 'numPaths': 1}, 'strategy': {'n_c': -1, 'n_s': -0.400148704518288, 'n_b': 26.21816502175756, 'k': 1.5035418983679911}}\n",
      "option_1=10.450584 vs option_2 = 16.126780\n",
      "delta_1=0.636831 vs delta_2=0.689691\n",
      "gamma_1=0.018762 vs gamma_2=0.012479\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Tasks:\n",
    "# Setup\n",
    "#           dS/S = r*dt + sigma*dW\n",
    "#           dB/B = r*dt\n",
    "\n",
    "# 1) implement static delta-neutral strategy in MC\n",
    "# 2) implement static delta-gamma-neutral strategy in MC\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "\n",
    "def Black_ScholesPrice(parameters):\n",
    "\n",
    "    S0 = parameters['model']['S0']\n",
    "    sigma = parameters['model']['sigma']    \n",
    "    rf = parameters['model']['rf']  \n",
    "    \n",
    "    K = parameters['option']['K']    \n",
    "    T = parameters['option']['T']\n",
    "    option_type = parameters['option']['optype'] \n",
    "    \n",
    "    DF = np.exp(-rf*T)\n",
    "    \n",
    "    d1 = (np.log(S0/K)+(rf+0.5*sigma**2)*T)/(sigma*np.sqrt(T))\n",
    "    d2 = d1 - sigma * np.sqrt(T)\n",
    "    \n",
    "    #print('S0=%f, K=%f, sigm=%f, T= %f, d1=%f vs d2=%f'%(S0, K,sigma, T, d1,d2))\n",
    "\n",
    "    if option_type == 1:  # call\n",
    "        option_price = S0 * norm.cdf(d1) - K * DF * norm.cdf(d2)\n",
    "    elif option_type == -1: # put\n",
    "        option_price = K * DF * norm.cdf(-d2) - S0 * norm.cdf(-d1) \n",
    "    \n",
    "    return option_price\n",
    "\n",
    "def Black_ScholesPrice_Paras(St, K, sigma, T, rf, option_type):\n",
    "\n",
    "    DF = np.exp(-rf*T)\n",
    "    \n",
    "    d1 = (np.log(St/K)+(rf+0.5*sigma**2)*T)/(sigma*np.sqrt(T))\n",
    "    d2 = d1 - sigma * np.sqrt(T)\n",
    "\n",
    "    if option_type == 1:  # call\n",
    "        option_price = St * norm.cdf(d1) - K * DF * norm.cdf(d2)\n",
    "    elif option_type == -1: # put\n",
    "        option_price = K * DF * norm.cdf(-d2) - St * norm.cdf(-d1) \n",
    "    \n",
    "    return option_price\n",
    "\n",
    "def Black_Scholes_Delta(parameters):\n",
    "\n",
    "    # based on the lecture, delta = N(d1)\n",
    "    \n",
    "    S0 = parameters['model']['S0']\n",
    "    sigma = parameters['model']['sigma']    \n",
    "    rf = parameters['model']['rf']\n",
    "    \n",
    "    K = parameters['option']['K'] \n",
    "    T = parameters['option']['T']  \n",
    "    option_type = parameters['option']['optype'] \n",
    "    \n",
    "    d1 = (np.log(S0/K)+(rf+0.5*sigma**2)*T)/(sigma*np.sqrt(T))\n",
    "    \n",
    "    if option_type == 1:  # call    \n",
    "        bs_delta = norm.cdf(d1)\n",
    "    else:    \n",
    "        bs_delta = norm.cdf(d1) - 1    \n",
    "    \n",
    "    return bs_delta \n",
    "\n",
    "def Black_Scholes_Gamma(parameters):\n",
    "    \n",
    "    # based on the lecture, gamma = phi(d1)/S_t/(sigma*sqrt(T))\n",
    "    \n",
    "    S0 = parameters['model']['S0']\n",
    "    sigma = parameters['model']['sigma']    \n",
    "    rf = parameters['model']['rf']\n",
    "    \n",
    "    K = parameters['option']['K'] \n",
    "    T = parameters['option']['T']    \n",
    "    \n",
    "    d1 = (np.log(S0/K)+(rf+0.5*sigma**2)*T)/(sigma*np.sqrt(T))\n",
    "    \n",
    "    bs_gamma = norm.pdf(d1)/S0/(sigma*np.sqrt(T))\n",
    "    \n",
    "    return bs_gamma \n",
    "\n",
    "def EulerMilsteinMCStock(scheme, parameters):\n",
    "    np.random.seed(1000)\n",
    "\n",
    "    # time setup\n",
    "    T = parameters['setup']['T']  # total time/maturity\n",
    "    numSteps = parameters['setup']['numSteps']  # number of steps\n",
    "    numPaths = parameters['setup']['numPaths']  # number of simulated paths\n",
    "    dt = parameters['setup']['dt']\n",
    "\n",
    "    # model parameters\n",
    "    S_0 = parameters['model']['S0']  # initial value\n",
    "    sigma = parameters['model']['sigma']  # initial value\n",
    "    rf = parameters['model']['rf']  # initial value    \n",
    "\n",
    "    # simulation    \n",
    "    S = np.zeros((numSteps + 1, numPaths),dtype=float)\n",
    "    S[0,:] = np.log(S_0)\n",
    "  \n",
    "    ################         simluations for asset price S              ########\n",
    "    for i in range(numPaths):\n",
    "        for t_step in range(1, numSteps+1):\n",
    "            # the 2 stochastic drivers for variance V and asset price S and correlated\n",
    "            Zs = np.random.normal(0, 1, 1)                        \n",
    "            \n",
    "            if scheme == 'Euler':\n",
    "                S[t_step,i] = S[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs \n",
    "            elif scheme == 'Milstein':    \n",
    "                # Euler and Milstein have the same discretization scheme for Log(S) due to dsigma(t,X)/dX =0\n",
    "                S[t_step,i] = S[t_step-1,i] + (rf-sigma**2/2)*dt + sigma*np.sqrt(dt)*Zs                                \n",
    "            \n",
    "    return np.exp(S)\n",
    "\n",
    "def DeltaGammaNeutralHedging(Sim_S,parameters):\n",
    "\n",
    "    # for delta-neutral hedging, k=0\n",
    "    # for delta-gamma-neutral hedging, k = -n_c*gamma_1/gamma_2\n",
    "    # strategy\n",
    "    n_c = parameters['strategy']['n_c'] \n",
    "    n_s = parameters['strategy']['n_s'] \n",
    "    n_b = parameters['strategy']['n_b'] \n",
    "    k = parameters['strategy']['k']   # k == 0:   delta-neutral and otherwise delta-gamma-neutral\n",
    "    \n",
    "    # time setup\n",
    "    T = parameters['setup']['T']  # total time/maturity\n",
    "    numSteps = parameters['setup']['numSteps']  # number of steps\n",
    "    numPaths = parameters['setup']['numPaths']  # number of simulated paths\n",
    "    dt = parameters['setup']['dt']\n",
    "    \n",
    "    # model\n",
    "    sigma = parameters['model']['sigma']  # initial value\n",
    "    rf = parameters['model']['rf']   \n",
    "    \n",
    "    # Option_1\n",
    "    K = parameters['asset']['K']  # Option_1 \n",
    "    option_type_1 = parameters['asset']['optype'] \n",
    "    \n",
    "    # Option_2\n",
    "    K_2 = parameters['option']['K']  # Option_2\n",
    "    T_2 = parameters['option']['T']   \n",
    "    option_type_2 = parameters['option']['optype'] \n",
    "    \n",
    "    ################         replication errors              ########\n",
    "    PI = np.zeros((numSteps + 1, numPaths),dtype=float)\n",
    "    PI[0,:] = 0\n",
    "    \n",
    "    for i in range(numPaths):\n",
    "        for t_step in range(1, numSteps+1):\n",
    "            S_t_i = Sim_S[t_step,i]\n",
    "            T_new = T - dt * t_step  # update the maturity of option_1\n",
    "            T_2_new = T_2 - dt * t_step  #update the maturity of option_2\n",
    "            \n",
    "            if T_new > 0:     # before T\n",
    "                price_1_t_i = Black_ScholesPrice_Paras(S_t_i, K, sigma, T_new, rf, option_type_1)  # option_1 is not expired                \n",
    "            elif T_new == 0:   # at T\n",
    "                price_1_t_i = np.maximum(0, (S_t_i- K) if option_type_1 == 1 else (K-S_t_i)) # option_2 is not expired \n",
    "            \n",
    "            if k != 0: # delta-gamma-neutral hedging\n",
    "                price_2_t_i = Black_ScholesPrice_Paras(S_t_i, K_2, sigma, T_2_new, rf, option_type_2)   # option_2 is not expired due to T1<T2 \n",
    "            else:       # delta-neutral hedging\n",
    "                price_2_t_i = 0\n",
    "            \n",
    "            #print('price_1_t_i=%f vs price_2_t_i=%f'%(price_1_t_i, price_2_t_i))\n",
    "    \n",
    "            # work out replication errors\n",
    "            # NOTE:\n",
    "            # since the portfolio is not rebalanced dynamically over time, the time-t value of PI is not ensured to be zero. \n",
    "            # the self-financing requirement requires the zero value of PI at each time t, suggesting a dynamic trading strategy\n",
    "            # in this sense, we only talk about static trading strategy in this demo, but the idea should be very clear\n",
    "            PI[t_step,i] = n_c*price_1_t_i + n_s*S_t_i + k*price_2_t_i + n_b*(1+rf*dt)  \n",
    "            \n",
    "    return PI        \n",
    "\n",
    "#def Plot(PI_DN, PI_DGN, S_T)\n",
    "\n",
    "if __name__==\"__main__\": # main function\n",
    "    \n",
    "    #==================================================\n",
    "    #    Environment Setup\n",
    "    #================================================== \n",
    "    \n",
    "    # underlying info\n",
    "    S0 = 100\n",
    "    sigma = 0.20    \n",
    "    rf = 0.05       \n",
    "    \n",
    "    # option info    \n",
    "    K = 100\n",
    "    T = 1     # maturity\n",
    "    Optype = 1 # 1: call -1: put \n",
    "    \n",
    "    # discrete setup\n",
    "    N = 200  # steps\n",
    "    dt = T/N\n",
    "    M = 1\n",
    "    \n",
    "    # info structure\n",
    "    parameters = {'model':{'S0':S0, 'sigma':sigma, 'rf':rf},                 \n",
    "                  'asset':{'K':K, 'optype':Optype},\n",
    "                  'option':{'K':0, 'optype':0, 'T':0},   # save all option info\n",
    "                  'setup':{'T':T, 'numSteps':N, 'dt': T/N, 'numPaths':M},                \n",
    "                  'strategy':{'n_c':0, 'n_s':0, 'n_b':0, 'k':0}   \n",
    "                 }\n",
    "    \n",
    "    #==================================================\n",
    "    #    simulation of stock price paths\n",
    "    #==================================================     \n",
    "    Sim_S = EulerMilsteinMCStock('Euler', parameters)    \n",
    "    Stock_DF = pd.DataFrame(Sim_S) \n",
    "    Stock_DF.to_excel(r\"Stock_paths.xlsx\")\n",
    "    \n",
    "    # plot simulated stock prices\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    plt.plot(Sim_S)\n",
    "    plt.ylabel('Simulated stock price paths')\n",
    "    plt.xlabel('time step')    \n",
    "    plt.tight_layout()\n",
    "    plt.show()   \n",
    "    \n",
    "    \n",
    "    #==================================================\n",
    "    #    Task 1 -- delta-neutral strategy (static)\n",
    "    #    Key ideas: 1) the strategy is established at t=0\n",
    "    #               2) hold it until maturity T wihout rebalancing\n",
    "    #               3) replication errors are recored during [0,T]\n",
    "    #================================================== \n",
    "    # setup   \n",
    "    \n",
    "    #option_1  at t =0 \n",
    "    parameters_1 = parameters  \n",
    "    parameters_1['option']['K'] = K\n",
    "    parameters_1['option']['optype'] = Optype  # call\n",
    "    parameters_1['option']['T'] = T  \n",
    "    \n",
    "    BS_price_1 = Black_ScholesPrice(parameters_1)    \n",
    "    delta_1 = Black_Scholes_Delta(parameters_1)\n",
    "    gamma_1 = Black_Scholes_Gamma(parameters_1)\n",
    "    \n",
    "    parameters_1['strategy']['n_c'] = -1 # -1: a short position in Option 1\n",
    "    parameters_1['strategy']['n_s'] = delta_1\n",
    "    parameters_1['strategy']['n_b'] = -(parameters_1['strategy']['n_c']*BS_price_1 \n",
    "                                        + parameters_1['strategy']['n_s']* parameters_1['model']['S0']\n",
    "                                       )    \n",
    "    parameters_1['strategy']['k'] = 0\n",
    "    \n",
    "    print('parameter_1=\\n')\n",
    "    print(parameters_1)\n",
    "    \n",
    "    # perform delta-neutral hedging\n",
    "    PI_DN = DeltaGammaNeutralHedging(Sim_S, parameters_1)\n",
    "    PI_DN_DF = pd.DataFrame(PI_DN) \n",
    "    PI_DN_DF.to_excel(r\"PI_DN_paths.xlsx\")\n",
    "    \n",
    "    #==================================================\n",
    "    #    Task 2 -- delta-gamma-neutral strategy (static)\n",
    "    #    Key ideas: 1) the strategy is established at t=0\n",
    "    #               2) hold it until maturity T wihout rebalancing\n",
    "    #               3) replication errors are recored during [0,T]\n",
    "    #================================================== \n",
    "    # setup   \n",
    "    \n",
    "    #option_2  at t =0 \n",
    "    parameters_2 = parameters  \n",
    "    parameters_2['option']['K'] = K\n",
    "    parameters_2['option']['optype'] = Optype  # call\n",
    "    parameters_2['option']['T'] = T + 1 # with longer maturity  \n",
    "    \n",
    "    BS_price_2 = Black_ScholesPrice(parameters_2)    \n",
    "    delta_2 = Black_Scholes_Delta(parameters_2)\n",
    "    gamma_2 = Black_Scholes_Gamma(parameters_2)\n",
    "    \n",
    "    parameters_2['strategy']['n_c'] = -1 # -1: a short position in Option 1\n",
    "    parameters_2['strategy']['k'] = -parameters_2['strategy']['n_c']*gamma_1/gamma_2\n",
    "    parameters_2['strategy']['n_s'] = -parameters_2['strategy']['n_c']*delta_1 - parameters_2['strategy']['k']* delta_2\n",
    "    parameters_2['strategy']['n_b'] = -(parameters_2['strategy']['n_c']*BS_price_1 \n",
    "                                        + parameters_2['strategy']['n_s']* parameters_2['model']['S0']\n",
    "                                        + parameters_2['strategy']['k']* BS_price_2\n",
    "                                       )     \n",
    "    print('parameter_2=\\n')\n",
    "    print(parameters_2)\n",
    "\n",
    "    print('option_1=%f vs option_2 = %f'%(BS_price_1, BS_price_2))\n",
    "    print('delta_1=%f vs delta_2=%f'%(delta_1, delta_2))\n",
    "    print('gamma_1=%f vs gamma_2=%f'%(gamma_1, gamma_2))\n",
    "    \n",
    "    #perform delta-gamma-neutral hedging \n",
    "    PI_DGN = DeltaGammaNeutralHedging(Sim_S,parameters_2)\n",
    "    \n",
    "    PI_DGN_DF = pd.DataFrame(PI_DGN) \n",
    "    PI_DGN_DF.to_excel(r\"PI_DGN_paths.xlsx\")\n",
    "    \n",
    "    #==================================================\n",
    "    #    Plot results\n",
    "    #================================================== \n",
    "    plt.figure(figsize=(12,8))\n",
    "    plt.subplot(2,1,1)\n",
    "    plt.plot(PI_DN)\n",
    "    plt.grid(True)\n",
    "    #plt.xlabel('Paths(M)')\n",
    "    plt.ylabel('Replication Errors (in cash units)')\n",
    "    plt.title('Delta-Neutral Hedging')\n",
    "    \n",
    "    plt.subplot(2,1,2)\n",
    "    plt.plot(PI_DGN)\n",
    "    plt.grid(True)\n",
    "    plt.xlabel('Paths(M)')\n",
    "    plt.ylabel('Replication Errors (in cash units)')\n",
    "    plt.title('Delta-Gamma-Neutral Hedging')\n",
    "    \n",
    "    plt.figure(figsize=(12,4))\n",
    "    data_DN = np.transpose([Sim_S[-1,:],PI_DN[-1,:]])  # convert data into the one with two columns\n",
    "    #print(data_DN[np.lexsort(data_DN[:,::-1].T)])    # sort data based on the first column and change the data in 2nd column accordingly\n",
    "    new_data_DN = data_DN[np.lexsort(data_DN[:,::-1].T)]  # save the sorted data to a new variable\n",
    "    plt.plot(new_data_DN[:,0],new_data_DN[:,1],\"b\",label='Delta-Neutral')  # plot data in the way we want\n",
    "    \n",
    "    data_DGN = np.transpose([Sim_S[-1,:],PI_DGN[-1,:]])  # convert data into the one with two columns\n",
    "    #print(data_DGN[np.lexsort(data_DGN[:,::-1].T)])    # sort data based on the first column and change the data in 2nd column accordingly\n",
    "    new_data_DGN = data_DGN[np.lexsort(data_DGN[:,::-1].T)]  # save the sorted data to a new variable\n",
    "    plt.plot(new_data_DGN[:,0],new_data_DGN[:,1],\"r-*\",label='Delta-Gamma-Neutral')  # plot data in the way we want\n",
    "    \n",
    "    plt.legend(loc=0) \n",
    "    plt.grid(True)\n",
    "    plt.xlabel('Stock Price (S_T)')\n",
    "    plt.ylabel('Replication Errors (in cash units)')\n",
    "    plt.title('(Static) Hedging Performance at Maturity(T)')\n",
    "    \n",
    "    plt.figure(figsize=(12,4))\n",
    "    plt.plot(np.mean(PI_DN,axis=1),\"b\", label='Delta-Neutral')\n",
    "    plt.plot(np.mean(PI_DGN,axis=1),'r-*',label='Delta-Gamma-Neutral')  \n",
    "    plt.legend(loc=0) \n",
    "    plt.grid(True)\n",
    "    plt.xlabel('Paths(M)')\n",
    "    plt.ylabel('Averaged Replication Errors (in cash units)')\n",
    "    plt.title('(Static) Hedging Performance over tim [0,T]')\n",
    "    \n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1328324895589963\n",
      "-1.1131011749855362\n",
      "0.6101857363236398\n"
     ]
    }
   ],
   "source": [
    "# test\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "\n",
    "u = np.random.rand()\n",
    "print(u)\n",
    "\n",
    "x = norm.ppf(u)\n",
    "print(x)\n",
    "\n",
    "S0 = 100\n",
    "K = 95\n",
    "rf = 0.05\n",
    "sigma = 0.20\n",
    "T = 0.50\n",
    "\n",
    "d1 = (np.log(S0/K)+(rf+0.5*sigma**2)*T)/(sigma*np.sqrt(T))\n",
    "print(d1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
